# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# -------------------------
# 1. Load the dataset
# -------------------------
df = pd.read_csv("housing_dataset.csv")  # use the csv we created
print("First 5 rows:\n", df.head())

# -------------------------
# 2. Explore the data
# -------------------------
print("\nDataset Info:")
print(df.info())

print("\nSummary Statistics:")
print(df.describe())

# Correlation heatmap
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation")
plt.show()

# -------------------------
# 3. Prepare features & target
# -------------------------
X = df.drop("Price", axis=1)  # Features
y = df["Price"]               # Target

# Split into training & testing sets (80/20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -------------------------
# 4. Train the model
# -------------------------
model = LinearRegression()
model.fit(X_train, y_train)

# -------------------------
# 5. Predictions
# -------------------------
y_pred = model.predict(X_test)

# -------------------------
# 6. Evaluation
# -------------------------
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Performance:")
print("Mean Squared Error:", mse)
print("RÂ² Score:", r2)

# -------------------------
# 7. Visualization
# -------------------------
plt.scatter(y_test, y_pred, color='blue')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()

# -------------------------
# 8. Example Prediction
# -------------------------
sample_house = [[2000, 4, 3, 9]]  # [Size_sqft, Bedrooms, Bathrooms, Location_Score]
predicted_price = model.predict(sample_house)
print(f"\nPredicted Price for house {sample_house}: ${predicted_price[0]:.2f}")
